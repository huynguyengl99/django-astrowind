---
import type { AWPost } from '~/types/content';

import Layout from '~/layouts/PageLayout.astro';
import BlogList from '~/components/blog/List.astro';
import Headline from '~/components/blog/Headline.astro';
import Pagination from '~/components/blog/Pagination.astro';

import { blogListRobots, getPostPage } from '~/utils/blog';
import { cmsApiClient } from '~/services/cms.service';
import { LANGUAGES } from '~/utils/languages';
import { BLOG_BASE, getPermalink } from '~/utils/permalinks';

export const prerender = true;

export async function getStaticPaths() {
  const size = 10;

  const res: any[] = [];
  for (let lang of LANGUAGES) {
    let page = 1;

    let postsRes = await cmsApiClient.postsPostsList({
      headers: { 'accept-language': lang },
      queries: {
        page,
        size,
      },
    });
    const count = postsRes.count;
    const maxPage = Math.ceil(count / size);
    res.push(
      {
        params: { lang, page },
        props: {
          data: postsRes.results,
          next: postsRes.next ? getPermalink(String(page + 1), BLOG_BASE, lang) : '',
          previous: postsRes.previous ? getPermalink(String(page - 1), BLOG_BASE, lang) : '',
        },
      },
      {
        params: { lang, page: undefined },
        props: {
          data: postsRes.results,
          next: postsRes.next ? getPermalink(String(page + 1), BLOG_BASE, lang) : '',
          previous: postsRes.previous ? getPermalink(String(page - 1), BLOG_BASE, lang) : '',
        },
      }
    );
    while (page < maxPage) {
      page += 1;
      postsRes = await cmsApiClient.postsPostsList({
        headers: { 'accept-language': lang },
        queries: {
          page,
          size,
        },
      });

      res.push({
        params: { lang, page },
        props: {
          data: postsRes.results,
          next: postsRes.next ? getPermalink(String(page + 1), BLOG_BASE, lang) : '',
          previous: postsRes.previous ? getPermalink(String(page - 1), BLOG_BASE, lang) : '',
        },
      });
    }
  }
  return res;
}

type Props = {
  next?: string;
  previous?: string;
  data: Array<AWPost>;
};

const { page, lang } = Astro.params;
const currentPage = page || 1;

const { data, previous, next } = Astro.props;

const postPageData = await getPostPage(lang);

// const allCategories = await findCategories();
// const allTags = await findTags();

const metadata = {
  title: `${postPageData.blogText}${currentPage > 1 ? ` â€” ${postPageData.pageText} ${currentPage}` : ''}`,
  robots: {
    index: blogListRobots?.index && currentPage === 1,
    follow: blogListRobots?.follow,
  },
  openGraph: {
    type: 'blog',
  },
};
---

<Layout metadata={metadata}>
  <section class="px-6 sm:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
    <Headline subtitle={postPageData.subtitle}>
      {postPageData.title}
    </Headline>
    <BlogList posts={data} />
    <Pagination prevUrl={previous} nextUrl={next} />
    <!--
      <PostTags tags={allCategories} class="mb-2" title="Search by Categories:" isCategory />
      <PostTags tags={allTags}  title="Search by Tags:" />
    -->
  </section>
</Layout>
