---
import setWith from 'lodash.setwith';

import type { AWPost } from '~/types/content';

import Layout from '~/layouts/PageLayout.astro';
import BlogList from '~/components/blog/List.astro';
import Headline from '~/components/blog/Headline.astro';
import Pagination from '~/components/blog/Pagination.astro';

import { cmsApiClient } from '~/services/cms.service';
import { LANGUAGES } from '~/utils/languages';
import { getPermalink } from '~/utils/permalinks';
import { getPostPage } from '~/utils/blog';

export const prerender = true;

export async function getStaticPaths() {
  const res: any[] = [];
  const size = 10;

  const allSlugMapping = {};
  for (let lang of LANGUAGES) {
    const tagsRes = await cmsApiClient.postsTagsList({
      headers: { 'accept-language': lang },
    });
    tagsRes.forEach((tagItem) => {
      setWith(allSlugMapping, [tagItem.id, lang], tagItem.slug, Object);
    });

    for (let tagObj of tagsRes) {
      let page = 1;
      const tag = tagObj.slug ? tagObj.slug : undefined;
      const tagTitle = tagObj.title;

      let postsRes = await cmsApiClient.postsPostsList({
        headers: { 'accept-language': lang },
        queries: {
          page,
          size,
          tag,
        },
      });

      const count = postsRes.count;
      const maxPage = Math.ceil(count / size);
      res.push(
        {
          params: { lang, tag, page },
          props: {
            data: postsRes.results,
            next: postsRes.next ? getPermalink(tag + '/' + String(page + 1), 'tag', lang) : '',
            previous: postsRes.previous ? getPermalink(tag + '/' + String(page - 1), 'tag', lang) : '',
            tagTitle,
            slugMapping: allSlugMapping[tagObj.id],
          },
        },
        {
          params: { lang, tag, page: undefined },
          props: {
            data: postsRes.results,
            next: postsRes.next ? getPermalink(tag + '/' + String(page + 1), 'tag', lang) : '',
            previous: postsRes.previous ? getPermalink(tag + '/' + String(page - 1), 'tag', lang) : '',
            tagTitle,
            slugMapping: allSlugMapping[tagObj.id],
          },
        }
      );
      while (page < maxPage) {
        page += 1;
        postsRes = await cmsApiClient.postsPostsList({
          headers: { 'accept-language': lang },
          queries: {
            page,
            size,
          },
        });

        res.push({
          params: { lang, tag, page },
          props: {
            data: postsRes.results,
            next: postsRes.next ? getPermalink(tag + '/' + String(page + 1), 'tag', lang) : '',
            previous: postsRes.previous ? getPermalink(tag + '/' + String(page - 1), 'tag', lang) : '',
            tagTitle,
            slugMapping: allSlugMapping[tagObj.id],
          },
        });
      }
    }
  }

  return res;
}

type Props = {
  next?: string;
  previous?: string;
  data: Array<AWPost>;
  tagTitle: string;
  slugMapping: object;
};

const { page, lang } = Astro.params;
const currentPage = page || 1;

const { data, previous, next, tagTitle, slugMapping } = Astro.props;

const postPageData = await getPostPage(lang);

// const allCategories = await findCategories();
// const allTags = await findTags();

const metadata = {
  title: `${postPageData.postsByTagText} '${tagTitle}'${currentPage > 1 ? ` â€” ${postPageData.pageText} ${currentPage} ` : ''}`,
};
---

<Layout metadata={metadata} slugMapping={slugMapping}>
  <section class="px-4 md:px-6 py-12 sm:py-16 lg:py-20 mx-auto max-w-4xl">
    <Headline>{postPageData.tagText}: {tagTitle}</Headline>
    <BlogList posts={data} />
    <Pagination prevUrl={previous} nextUrl={next} />
  </section>
</Layout>
